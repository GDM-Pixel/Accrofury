// Generated by Xata Codegen 0.28.3. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "Reservations",
    columns: [
      { name: "Nom", type: "string" },
      { name: "Nombre_Aventuriers", type: "int" },
      { name: "Date", type: "datetime" },
      { name: "Telephone", type: "string" },
      { name: "Email", type: "email" },
    ],
  },
  {
    name: "CapaciteJournaliere",
    columns: [
      { name: "Date", type: "datetime", unique: true },
      { name: "Capacite_Max", type: "int" },
      { name: "Places_Restantes", type: "int" },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Reservations = InferredTypes["Reservations"];
export type ReservationsRecord = Reservations & XataRecord;

export type CapaciteJournaliere = InferredTypes["CapaciteJournaliere"];
export type CapaciteJournaliereRecord = CapaciteJournaliere & XataRecord;

export type DatabaseSchema = {
  Reservations: ReservationsRecord;
  CapaciteJournaliere: CapaciteJournaliereRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://charles-s-workspace-8luqs9.eu-central-1.xata.sh/db/Accrofury",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
